name: Build Dawn Windows & Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: WIN-BUILD
    permissions:
      contents: write
    env:
      DEPOT_TOOLS_WIN_TOOLCHAIN: 0

    steps:
      - name: Checkout ngixi-builds repo
        uses: actions/checkout@v4
        with:
          clean: false

      - name: Load build versions
        shell: pwsh
        run: |
          Get-Content .github/workflows/build-versions.env | ForEach-Object {
            if ($_ -match '^([^=]+)=(.*)$') {
              $key = $matches[1].ToUpper()
              $value = $matches[2]
              Write-Host "Setting $key=$value"
              "$key=$value" | Out-File -Encoding utf8 -Append $env:GITHUB_ENV
            }
          }

      - name: Checkout Dawn
        shell: pwsh
        run: |
          if (-not (Test-Path dawn)) {
            git clone $env:DAWN_REPO dawn
          }

      - name: Configure Git
        shell: pwsh
        run: |
          git config --global user.email "build@ngixi.local"
          git config --global user.name "NGIXI Build Bot"
          git config --global --add safe.directory "$PWD\dawn"
          git config --global depot-tools.allowGlobalGitConfig false

      - name: Checkout tag
        shell: pwsh
        run: |
          cd dawn
          git fetch --tags --force --quiet
          git checkout --quiet "$env:DAWN_TAG"
          git rev-parse --short HEAD | Out-File -Encoding ascii ..\DAWN_GIT.txt

      - name: Fetch deps
        shell: pwsh
        run: |
          cd dawn
          Copy-Item scripts/standalone.gclient .gclient -Force
          gclient sync

      # Monolithic DLL => one webgpu_dawn.dll
      - name: Configure (monolithic SHARED)
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"
          cd dawn
          cmake -S . -B out\mono-shared -G Ninja ^
            -DCMAKE_BUILD_TYPE=Release ^
            -DCMAKE_C_COMPILER=cl ^
            -DCMAKE_CXX_COMPILER=cl ^
            -DCMAKE_CXX_FLAGS="/DNOMINMAX /DWIN32_LEAN_AND_MEAN" ^
            -DCMAKE_SYSTEM_VERSION=10.0 ^
            -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDLL ^
            -DBUILD_SHARED_LIBS=OFF ^
            -DDAWN_BUILD_MONOLITHIC_LIBRARY=SHARED ^
            -DDAWN_ENABLE_INSTALL=ON ^
            -DDAWN_BUILD_TESTS=OFF ^
            -DDAWN_BUILD_SAMPLES=OFF ^
            -DDAWN_BUILD_BENCHMARKS=OFF ^
            -DDAWN_ENABLE_BACKEND_D3D12=ON ^
            -DDAWN_ENABLE_BACKEND_VULKAN=ON ^
            -DDAWN_ENABLE_BACKEND_OPENGL=OFF ^
            -DDAWN_ENABLE_BACKEND_METAL=OFF ^
            -DDAWN_ENABLE_BACKEND_NULL=OFF ^
            -DTINT_BUILD_TESTS=OFF ^
            -DTINT_BUILD_SAMPLES=OFF ^
            -DTINT_BUILD_DOCS=OFF ^
            -DTINT_ENABLE_DXC=ON ^
            -DTINT_ENABLE_WGSL_READER=ON ^
            -DTINT_ENABLE_SPV_READER=OFF

      - name: Build (monolithic SHARED)
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"
          cd dawn
          cmake --build out\mono-shared --parallel

      - name: Install (monolithic SHARED)
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"
          cd dawn
          cmake --install out\mono-shared --prefix install\mono-shared

      - name: Report DLL dependents (monolithic SHARED)
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"
          cd dawn\install\mono-shared\bin
          if exist webgpu_dawn.dll dumpbin /dependents webgpu_dawn.dll > "..\..\..\..\DEPENDENTS.txt"

      # Monolithic static => one webgpu_dawn.lib
      - name: Configure (monolithic STATIC)
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"
          cd dawn
          cmake -S . -B out\mono-static -G Ninja ^
            -DCMAKE_BUILD_TYPE=Release ^
            -DCMAKE_C_COMPILER=cl ^
            -DCMAKE_CXX_COMPILER=cl ^
            -DCMAKE_CXX_FLAGS="/DNOMINMAX /DWIN32_LEAN_AND_MEAN" ^
            -DCMAKE_SYSTEM_VERSION=10.0 ^
            -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDLL ^
            -DBUILD_SHARED_LIBS=OFF ^
            -DDAWN_BUILD_MONOLITHIC_LIBRARY=STATIC ^
            -DDAWN_ENABLE_INSTALL=ON ^
            -DDAWN_BUILD_TESTS=OFF ^
            -DDAWN_BUILD_SAMPLES=OFF ^
            -DDAWN_BUILD_BENCHMARKS=OFF ^
            -DDAWN_ENABLE_BACKEND_D3D12=ON ^
            -DDAWN_ENABLE_BACKEND_VULKAN=ON ^
            -DDAWN_ENABLE_BACKEND_OPENGL=OFF ^
            -DDAWN_ENABLE_BACKEND_METAL=OFF ^
            -DDAWN_ENABLE_BACKEND_NULL=OFF ^
            -DTINT_BUILD_TESTS=OFF ^
            -DTINT_BUILD_SAMPLES=OFF ^
            -DTINT_BUILD_DOCS=OFF ^
            -DTINT_ENABLE_DXC=ON ^
            -DTINT_ENABLE_WGSL_READER=ON ^
            -DTINT_ENABLE_SPV_READER=OFF

      - name: Build (monolithic STATIC)
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"
          cd dawn
          cmake --build out\mono-static --parallel

      - name: Install (monolithic STATIC)
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"
          cd dawn
          cmake --install out\mono-static --prefix install\mono-static

      - name: Copy assets to all_assets_windows
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path all_assets_windows -Force
          Copy-Item -Recurse -Path dawn/install/* -Destination all_assets_windows/

      - name: Zip installs
        shell: pwsh
        run: |
          Compress-Archive -Path all_assets_windows -DestinationPath all_assets_windows.zip -Force
          Get-FileHash all_assets_windows.zip -Algorithm SHA256 |
            ForEach-Object { "$($_.Hash)  $($_.Path)" } | Out-File -Encoding ascii SHA256SUMS

      - name: Create Release and upload assets
        uses: softprops/action-gh-release@v2
        continue-on-error: true
        with:
          tag_name: ngixi-assets-${{ env.NGIXI_ASSET_VERSION }}
          target_commitish: ${{ github.sha }}
          name: NGIXI Assets ${{ env.NGIXI_ASSET_VERSION }} (Dawn ${{ env.DAWN_TAG }})
          body: |
            NGIXI Assets v${{ env.NGIXI_ASSET_VERSION }}
            Built from Dawn tag `${{ env.DAWN_TAG }}`.
            Assets are raw CMake install trees for monolithic SHARED and STATIC in all_assets_windows.zip.
            DAWN_GIT.txt contains the exact commit. SHA256SUMS included.
            DEPENDENTS.txt lists external DLLs required by webgpu_dawn.dll.
          files: |
            all_assets_windows.zip
            SHA256SUMS
            DAWN_GIT.txt
            DEPENDENTS.txt
          fail_on_unmatched_files: true
