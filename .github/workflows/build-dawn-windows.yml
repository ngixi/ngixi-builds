name: Build Dawn Windows

on:
  workflow_dispatch:
  workflow_call:

jobs:
  setup:
    runs-on: WIN-BUILD
    steps:
      - name: Checkout ngixi-builds repo
        uses: actions/checkout@v4
        with:
          clean: false

      - uses: ./.github/actions/setup-build
        with:
          build-dir: dawn-build

  build-windows:
    runs-on: WIN-BUILD
    needs: setup
    defaults:
      run:
        working-directory: dawn-build
    env:
      DEPOT_TOOLS_WIN_TOOLCHAIN: 0

    steps:

      - uses: ilammy/msvc-dev-cmd@v1

      - name: Checkout Dawn
        shell: pwsh
        run: |
          if (-not (Test-Path dawn)) {
            git clone ${{ vars.DAWN_REPO }} dawn
          }

      - name: Checkout tag
        shell: pwsh
        run: |
          cd dawn
          git fetch --tags --force --quiet
          git checkout --quiet ${{ vars.DAWN_TAG }}
          git rev-parse --short HEAD | Out-File -Encoding ascii ..\DAWN_GIT.txt

      - name: Fetch deps
        shell: pwsh
        run: |
          cd dawn
          Copy-Item scripts/standalone.gclient .gclient -Force
          gclient sync

      - name: Configure (dawn shared dll)
        shell: cmd
        run: |
          cd dawn
          rmdir /s /q out 2>nul
          cmake -S . -B out -G Ninja ^
            -DCMAKE_BUILD_TYPE=Release ^
            -DBUILD_SHARED_LIBS=OFF ^
            -DDAWN_BUILD_MONOLITHIC_LIBRARY=SHARED ^
            -DDAWN_ENABLE_INSTALL=ON ^
            -DDAWN_BUILD_TESTS=OFF ^
            -DDAWN_BUILD_SAMPLES=ON ^
            -DDAWN_BUILD_BENCHMARKS=OFF ^
            -DDAWN_ENABLE_D3D12=ON ^
            -DDAWN_ENABLE_D3D11=OFF ^
            -DDAWN_ENABLE_VULKAN=ON ^
            -DDAWN_ENABLE_DESKTOP_GL=OFF ^
            -DDAWN_ENABLE_OPENGLES=OFF ^
            -DDAWN_ENABLE_NULL=ON ^
            -DDAWN_USE_BUILT_DXC=ON ^
            -DDAWN_FETCH_DEPENDENCIES=OFF ^
            -DTINT_BUILD_SPV_READER=ON ^
            -DTINT_BUILD_WGSL_READER=ON ^
            -DTINT_BUILD_GLSL_WRITER=ON ^
            -DTINT_BUILD_GLSL_VALIDATOR=ON ^
            -DTINT_BUILD_HLSL_WRITER=ON ^
            -DTINT_BUILD_MSL_WRITER=ON ^
            -DTINT_BUILD_SPV_WRITER=ON ^
            -DTINT_BUILD_WGSL_WRITER=ON ^
            -DTINT_BUILD_NULL_WRITER=ON ^
            -DTINT_BUILD_IR_BINARY=ON ^
            -DTINT_BUILD_FUZZERS=OFF ^
            -DTINT_BUILD_BENCHMARKS=ON ^
            -DTINT_BUILD_TESTS=ON ^
            -DTINT_BUILD_AS_OTHER_OS=OFF ^
            -DTINT_BUILD_TINTD=ON ^
            -DTINT_ENABLE_IR_VALIDATION=ON ^
            -DTINT_ENABLE_BREAK_IN_DEBUGGER=ON ^
            -DTINT_CHECK_CHROMIUM_STYLE=ON ^
            -DTINT_RANDOMIZE_HASHES=ON
      
      - name: Build (monolithic SHARED)
        shell: cmd
        run: |
          cd dawn
          cmake --build out --parallel

      - name: Install (monolithic SHARED)
        shell: cmd
        run: |
          cd dawn
          cmake --install out --prefix install

      - name: Create build.zig.zon
        shell: pwsh
        run: |
          $tag = "${{ vars.DAWN_TAG }}"
          # Parse tag, e.g., if "v20251026.130842", version = "2025.10.26"
          if ($tag -match "v(\d{4})(\d{2})(\d{2})\.\d+") {
            $version = "$($matches[1]).$($matches[2]).$($matches[3])"
          } else {
            Write-Error "Unrecognized DAWN_TAG format: $tag"
            exit 1
          }
          $content = ".{" + "`n" + "    .name = .dawn," + "`n" + "    .version = `"$version`"," + "`n" + "    .paths = .{`"`"`"}," + "`n" + "}"
          Set-Content -Path "dawn/install/build.zig.zon" -Value $content -Encoding UTF8 -Force

      - name: Create tar archive
        shell: cmd
        run: |
          cd dawn\install
          if exist ..\..\dawn-win-msvc.tar.gz del ..\..\dawn-win-msvc.tar.gz
          tar -czf ..\..\dawn-win-msvc.tar.gz *

      - name: Report DLL dependents
        shell: cmd
        run: |
          cd dawn\install\bin
          if exist webgpu_dawn.dll dumpbin /dependents webgpu_dawn.dll > "DEPENDENTS.txt"

      - name: Upload Dawn artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dawn-windows-assets
          path: |
            dawn-build/dawn-win-msvc.tar.gz
            dawn-build/DAWN_GIT.txt
